
#include <iostream>
using namespace std;

class DynamicIntegerArray {
private:
    int *data;
    int size;

public:
    DynamicIntegerArray() {
        this->size = 0;
        data = new int[0];
    }

    DynamicIntegerArray(int arr[], int size) {
        this->size = size;
        data = new int[size];
        for(int i = 0; i < size; i++) {
            data[i] = arr[i];
        }
    }

    DynamicIntegerArray(const DynamicIntegerArray &n) {
        this->size = n.size;
        data = new int[size];
        for(int i = 0; i < size; i++) {
            data[i] = n.data[i];
        }
    }

    void print() const {
        cout << "[ ";
        for(int i = 0; i < size; i++) {
            cout << data[i] << " ";
        }
        cout << "]";
    }

    ~DynamicIntegerArray() {
        delete[] data;
    }

    void PushBack(int val) {
        this->size++;
        int *temp = new int[size];
        temp[0] = val;
        for(int i = 1; i < size; i++) {
            temp[i] = data[i - 1];
        }
        delete[] data;
        data = temp;
    }

    void Insert(int val, int pos) {
        this->size++;
        int *temp = new int[size];
        pos--;
        int j = 0;
        temp[pos] = val;
        for(int i = 0; i < size; i++) {
            if (i == pos) {
                j = 1;
            }
            else {
                temp[i] = data[i - j];
            }
        }
        delete[] data;
        data = temp;
    }

    void remove(int pos) {
        this->size--;
        int *temp = new int[size];
        pos--;
        int j = 0;
        for(int i = 0; i < size; i++) {
            if (i == pos) {
                j = 1;
            }
            else {
                temp[i] = data[i + j];
            }
        }
        delete[] data;
        data = temp;
    }
};

int main() {
    int arry[7] = { 1, 8, 9, 5, 3, 6, 8 };
    DynamicIntegerArray A(arry, 5);
    A.PushBack(10);
    A.Insert(9, 5);
    A.remove(5);
    A.print();
    return 0;
}
